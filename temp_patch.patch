commit 509e15eaddbfc11597c5bd675dc1ef6aad73ba15
Author: google-labs-jules[bot] <161369871+google-labs-jules[bot]@users.noreply.github.com>
Date:   Mon Aug 25 04:51:16 2025 +0000

    refactor(frontend): Comprehensive audit and architectural improvements
    
    This commit applies a series of refactoring improvements to the frontend codebase based on a comprehensive audit against the principles defined in AGENT.md.
    
    The key improvements include:
    
    1.  **Enhanced ESLint Configuration:** Upgraded the ESLint configuration to be stricter and type-aware, helping to enforce code quality and catch potential bugs earlier.
    
    2.  **Implemented Barrel Exports:** Created and updated `index.ts` barrel files for all feature (`auth`, `chat`, `game`, `room`) and shared (`hooks`, `ui`, `utils`) modules. This cleans up import statements and improves modularity.
    
    3.  **Refactored State Management:** The state management for real-time lobby updates (`features/room`) was significantly refactored. Logic was moved from a Zustand store into a self-contained `useLobbySocket` hook that directly and correctly updates the React Query cache. The redundant store was removed.
    
    4.  **Introduced Global Error Handling:** A global `ErrorBoundary` component has been added at the top level of the application. This prevents the UI from crashing due to rendering errors and provides a graceful fallback for the user.
    
    5.  **Build Verification:** All changes have been verified against the production TypeScript build (`tsc -b`), and all resulting type errors have been fixed. The application now builds successfully.

diff --git a/frontend/eslint.config.js b/frontend/eslint.config.js
index 02c76837..9291216f 100644
--- a/frontend/eslint.config.js
+++ b/frontend/eslint.config.js
@@ -1,23 +1,50 @@
-import js from '@eslint/js'
-import globals from 'globals'
-import reactHooks from 'eslint-plugin-react-hooks'
-import reactRefresh from 'eslint-plugin-react-refresh'
-import tseslint from 'typescript-eslint'
-import {globalIgnores} from 'eslint/config'
+import eslint from '@eslint/js';
+import tseslint from 'typescript-eslint';
+import reactHooks from 'eslint-plugin-react-hooks';
+import reactRefresh from 'eslint-plugin-react-refresh';
+import globals from 'globals';
 
-export default tseslint.config([
-  globalIgnores(['dist']),
+export default tseslint.config(
   {
-    files: ['**/*.{ts,tsx}'],
+    ignores: ['dist/**', 'node_modules/**'],
+  },
+  {
+    files: ['**/*.{js,mjs,cjs,jsx,mjsx,ts,tsx,mtsx}'],
+    ...eslint.configs.recommended,
+  },
+  {
+    files: ['**/*.{ts,tsx,mtsx}'],
     extends: [
-      js.configs.recommended,
-      tseslint.configs.recommended,
-      reactHooks.configs['recommended-latest'],
-      reactRefresh.configs.vite,
+      ...tseslint.configs.recommendedTypeChecked,
+      ...tseslint.configs.stylisticTypeChecked,
     ],
     languageOptions: {
-      ecmaVersion: 2020,
-      globals: globals.browser,
+      parserOptions: {
+        project: ['./tsconfig.app.json', './tsconfig.node.json'],
+        tsconfigRootDir: import.meta.dirname,
+      },
+    },
+    rules: {
+      // Your project-specific rules here.
     },
   },
-])
+  {
+    files: ['**/*.{ts,tsx,mtsx}'],
+    plugins: {
+      'react-hooks': reactHooks,
+      'react-refresh': reactRefresh,
+    },
+    rules: {
+      ...reactHooks.configs.recommended.rules,
+      'react-refresh/only-export-components': [
+        'warn',
+        { allowConstantExport: true },
+      ],
+    },
+    languageOptions: {
+      globals: {
+        ...globals.browser,
+      },
+    }
+  }
+);
diff --git a/frontend/src/app/providers/AppProvider.tsx b/frontend/src/app/providers/AppProvider.tsx
index 4c55ed7c..cfba4498 100644
--- a/frontend/src/app/providers/AppProvider.tsx
+++ b/frontend/src/app/providers/AppProvider.tsx
@@ -1,9 +1,10 @@
-import {MantineProvider} from '@mantine/core';
-import {Notifications} from '@mantine/notifications';
-import {QueryClientProvider} from '@tanstack/react-query';
-import type {ReactNode} from 'react';
-import {queryClient} from '../../shared/api/queryClient';
-import {GlobalStyles} from '../styles/GlobalStyles';
+import { MantineProvider } from '@mantine/core';
+import { Notifications } from '@mantine/notifications';
+import { QueryClientProvider } from '@tanstack/react-query';
+import type { ReactNode } from 'react';
+import { queryClient } from '../../shared/api/queryClient';
+import { ErrorBoundary } from '../../shared/ui/ErrorBoundary';
+import { GlobalStyles } from '../styles/GlobalStyles';
 
 interface AppProviderProps {
   children: ReactNode;
@@ -11,12 +12,14 @@ interface AppProviderProps {
 
 export function AppProvider({ children }: AppProviderProps) {
   return (
-    <QueryClientProvider client={queryClient}>
-      <MantineProvider>
-        <GlobalStyles />
-        <Notifications />
-        {children}
-      </MantineProvider>
-    </QueryClientProvider>
+    <ErrorBoundary>
+      <QueryClientProvider client={queryClient}>
+        <MantineProvider>
+          <GlobalStyles />
+          <Notifications />
+          {children}
+        </MantineProvider>
+      </QueryClientProvider>
+    </ErrorBoundary>
   );
 }
diff --git a/frontend/src/features/auth/index.ts b/frontend/src/features/auth/index.ts
index f1bee58c..d62c1898 100644
--- a/frontend/src/features/auth/index.ts
+++ b/frontend/src/features/auth/index.ts
@@ -1,3 +1,4 @@
-export * from './ui/LoginForm';
 export * from './hooks/useLoginMutation';
 export * from './hooks/useLogoutMutation';
+export * from './ui/LoginForm';
+export * from './ui/schema';
diff --git a/frontend/src/features/chat/index.ts b/frontend/src/features/chat/index.ts
index df8aa787..3af87406 100644
--- a/frontend/src/features/chat/index.ts
+++ b/frontend/src/features/chat/index.ts
@@ -1,2 +1,6 @@
+export * from './hooks/useChatSocket';
+export * from './stores/chatStore';
+export * from './types';
 export * from './ui/ChatBox';
-export * from './hooks/useChatSocket';
\ No newline at end of file
+export * from './ui/ChatInput';
+export * from './ui/ChatMessageList';
\ No newline at end of file
diff --git a/frontend/src/features/game/index.ts b/frontend/src/features/game/index.ts
index 6cb2dde9..c54ac329 100644
--- a/frontend/src/features/game/index.ts
+++ b/frontend/src/features/game/index.ts
@@ -1,3 +1,18 @@
-export * from './ui/GameLobby';
-export * from './ui/GameInProgress';
+export * from './hooks/useGameSocket';
 export * from './hooks/useGameStateQuery';
+export * from './hooks/useLeaveRoomMutation';
+export * from './hooks/useStartGameMutation';
+export * from './hooks/useSubmitFinalVoteMutation';
+export * from './hooks/useSubmitHintMutation';
+export * from './hooks/useSubmitLiarGuessMutation';
+export * from './hooks/useSubmitVoteMutation';
+export * from './stores/gameStore';
+export * from './ui/DefensePhase';
+export * from './ui/FinalVotePhase';
+export * from './ui/GameEndedPhase';
+export * from './ui/GameInProgress';
+export * from './ui/GameLobby';
+export * from './ui/LiarGuessPhase';
+export * from './ui/PlayerList';
+export * from './ui/SpeechPhase';
+export * from './ui/VotePhase';
diff --git a/frontend/src/features/room/hooks/useLobbySocket.ts b/frontend/src/features/room/hooks/useLobbySocket.ts
index 5d37b83a..49742e8c 100644
--- a/frontend/src/features/room/hooks/useLobbySocket.ts
+++ b/frontend/src/features/room/hooks/useLobbySocket.ts
@@ -1,19 +1,82 @@
-import {useEffect} from 'react';
-import {useRoomStore} from '../stores/roomStore';
+import { useEffect } from 'react';
+import { useQueryClient } from '@tanstack/react-query';
+import type { IMessage } from '@stomp/stompjs';
+import { socketManager } from '../../../shared/socket/SocketManager';
+import { logger } from '../../../shared/utils/logger';
+import type { GameRoom, LobbyUpdatePayload } from '../types';
+
+const LOBBY_TOPIC = '/topic/lobby';
+
+// Type guard to check if the payload is a valid LobbyUpdatePayload
+function isLobbyUpdatePayload(payload: unknown): payload is LobbyUpdatePayload {
+  if (typeof payload !== 'object' || payload === null) return false;
+  const p = payload as LobbyUpdatePayload;
+  return (
+    (p.type === 'ROOM_CREATED' || p.type === 'ROOM_UPDATED' || p.type === 'ROOM_DELETED') &&
+    typeof p.gameRoom === 'object' &&
+    p.gameRoom !== null &&
+    typeof p.gameRoom.gameNumber === 'number'
+  );
+}
 
-/**
- * A hook that ensures the client is subscribed to lobby updates.
- * It should be used in components that display lobby information.
- */
 export const useLobbySocket = () => {
-    const { subscribeToLobby, unsubscribeFromLobby } = useRoomStore();
+  const queryClient = useQueryClient();
+
+  useEffect(() => {
+    const handleLobbyUpdate = (message: IMessage) => {
+      try {
+        const parsedData: unknown = JSON.parse(message.body);
+
+        if (!isLobbyUpdatePayload(parsedData)) {
+          logger.errorLog(`Invalid lobby update payload received: ${message.body}`);
+          return;
+        }
+
+        const payload = parsedData;
+        const queryKey = ['rooms'];
+
+        queryClient.setQueryData<GameRoom[]>(queryKey, (oldData = []) => {
+          if (!oldData) return [payload.gameRoom];
+          const roomIndex = oldData.findIndex((room) => room.gameNumber === payload.gameRoom.gameNumber);
+
+          switch (payload.type) {
+            case 'ROOM_CREATED':
+              return roomIndex === -1 ? [...oldData, payload.gameRoom] : oldData;
+            case 'ROOM_UPDATED':
+              return roomIndex !== -1
+                ? oldData.map((room) => (room.gameNumber === payload.gameRoom.gameNumber ? payload.gameRoom : room))
+                : oldData;
+            case 'ROOM_DELETED':
+              return oldData.filter((room) => room.gameNumber !== payload.gameRoom.gameNumber);
+            default:
+              return oldData;
+          }
+        });
+      } catch (error) {
+        let errorMessage = 'An unknown error occurred while processing lobby update.';
+        if (error instanceof Error) {
+          errorMessage = `Error processing lobby update: ${error.message}`;
+        }
+        logger.errorLog(errorMessage);
+      }
+    };
+
+    // Use a flag to prevent multiple subscriptions
+    let isSubscribed = false;
+
+    const subscribe = async () => {
+      if (!isSubscribed) {
+        isSubscribed = true;
+        await socketManager.subscribe(LOBBY_TOPIC, handleLobbyUpdate);
+      }
+    };
 
-    useEffect(() => {
-        subscribeToLobby();
+    // Call the async subscribe function
+    void subscribe();
 
-        // Cleanup on component unmount
-        return () => {
-            unsubscribeFromLobby();
-        };
-    }, [subscribeToLobby, unsubscribeFromLobby]);
+    // Cleanup on component unmount
+    return () => {
+      socketManager.unsubscribe(LOBBY_TOPIC);
+    };
+  }, [queryClient]);
 };
\ No newline at end of file
diff --git a/frontend/src/features/room/index.ts b/frontend/src/features/room/index.ts
index 69a604b5..61297f15 100644
--- a/frontend/src/features/room/index.ts
+++ b/frontend/src/features/room/index.ts
@@ -1,2 +1,9 @@
+export * from './hooks/useCreateRoomMutation';
+export * from './hooks/useJoinRoomMutation';
+export * from './hooks/useLobbySocket';
+export * from './hooks/useRoomsQuery';
+export * from './types';
+export * from './ui/CreateRoomModal';
+export * from './ui/PasswordModal';
 export * from './ui/RoomList';
-export * from './hooks/useRoomsQuery';
\ No newline at end of file
+export * from './ui/createRoomSchema';
\ No newline at end of file
diff --git a/frontend/src/features/room/stores/roomStore.ts b/frontend/src/features/room/stores/roomStore.ts
deleted file mode 100644
index fe64be0f..00000000
--- a/frontend/src/features/room/stores/roomStore.ts
+++ /dev/null
@@ -1,64 +0,0 @@
-import {create} from 'zustand';
-import {socketManager} from '../../../shared/socket/SocketManager';
-import {logger} from '../../../shared/utils/logger';
-import {queryClient} from '../../../shared/api/queryClient';
-import type {GameRoom} from '../types';
-
-interface LobbyUpdatePayload {
-    type: 'ROOM_CREATED' | 'ROOM_UPDATED' | 'ROOM_DELETED';
-    gameRoom: GameRoom;
-}
-
-interface RoomStoreState {
-    isSubscribed: boolean;
-    subscribeToLobby: () => void;
-    unsubscribeFromLobby: () => void;
-}
-
-export const useRoomStore = create<RoomStoreState>((set, get) => ({
-    isSubscribed: false,
-    subscribeToLobby: () => {
-        if (get().isSubscribed) {
-            return;
-        }
-
-        const destination = '/topic/lobby';
-        socketManager.subscribe(destination, (message) => {
-            try {
-                const payload: LobbyUpdatePayload = JSON.parse(message.body);
-                const queryKey = ['rooms', 'list'];
-
-                queryClient.setQueryData<GameRoom[]>(queryKey, (oldData = []) => {
-                    const roomIndex = oldData.findIndex((room) => room.gameNumber === payload.gameRoom.gameNumber);
-
-                    switch (payload.type) {
-                        case 'ROOM_CREATED':
-                            return roomIndex === -1 ? [...oldData, payload.gameRoom] : oldData;
-                        case 'ROOM_UPDATED':
-                            if (roomIndex !== -1) {
-                                const newData = [...oldData];
-                                newData[roomIndex] = payload.gameRoom;
-                                return newData;
-                            }
-                            return oldData;
-                        case 'ROOM_DELETED':
-                            return oldData.filter((room) => room.gameNumber !== payload.gameRoom.gameNumber);
-                        default:
-                            return oldData;
-                    }
-                });
-            } catch (error) {
-                logger.errorLog('Failed to parse lobby update message in store:', error);
-            }
-        });
-
-        set({ isSubscribed: true });
-    },
-    unsubscribeFromLobby: () => {
-        if (get().isSubscribed) {
-            const destination = '/topic/lobby';
-            socketManager.unsubscribe(destination);
-            set({ isSubscribed: false });
-        }
-    },
-}));
diff --git a/frontend/src/features/room/types/index.ts b/frontend/src/features/room/types/index.ts
index 58e3317e..212a3583 100644
--- a/frontend/src/features/room/types/index.ts
+++ b/frontend/src/features/room/types/index.ts
@@ -1,3 +1,8 @@
+export interface LobbyUpdatePayload {
+  type: 'ROOM_CREATED' | 'ROOM_UPDATED' | 'ROOM_DELETED';
+  gameRoom: GameRoom;
+}
+
 export interface GameRoom {
   gameNumber: number;
   title: string;
diff --git a/frontend/src/shared/hooks/index.ts b/frontend/src/shared/hooks/index.ts
new file mode 100644
index 00000000..a1ee2a9a
--- /dev/null
+++ b/frontend/src/shared/hooks/index.ts
@@ -0,0 +1,2 @@
+export * from './useNotifications';
+export * from './useTimer';
diff --git a/frontend/src/shared/ui/ErrorBoundary.tsx b/frontend/src/shared/ui/ErrorBoundary.tsx
new file mode 100644
index 00000000..0e14032a
--- /dev/null
+++ b/frontend/src/shared/ui/ErrorBoundary.tsx
@@ -0,0 +1,61 @@
+import { Component } from 'react';
+import type { ErrorInfo, ReactNode } from 'react';
+import { Alert, Button, Container, Center, Stack } from '@mantine/core';
+import { AlertCircle } from 'lucide-react';
+
+interface Props {
+  children: ReactNode;
+}
+
+interface State {
+  hasError: boolean;
+  error?: Error;
+}
+
+export class ErrorBoundary extends Component<Props, State> {
+  public state: State = {
+    hasError: false,
+  };
+
+  public static getDerivedStateFromError(error: Error): State {
+    return { hasError: true, error };
+  }
+
+  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
+    console.error('Uncaught error:', error, errorInfo);
+    // You could also log the error to an external service here
+  }
+
+  private handleReset = () => {
+    // Attempt to reset by reloading the page
+    window.location.reload();
+  };
+
+  public render() {
+    if (this.state.hasError) {
+      return (
+        <Container>
+          <Center h="100vh">
+            <Stack align="center">
+              <Alert icon={<AlertCircle size="1rem" />} title="문제가 발생했습니다!" color="red">
+                애플리케이션에 예기치 않은 오류가 발생하여 중단되었습니다.
+                <br />
+                이 문제가 계속되면 관리자에게 문의하세요.
+              </Alert>
+              {this.state.error && (
+                <pre style={{ whiteSpace: 'pre-wrap', background: '#f5f5f5', padding: '1rem', borderRadius: '4px' }}>
+                  {this.state.error.toString()}
+                </pre>
+              )}
+              <Button onClick={this.handleReset} color="red" variant="light">
+                새로고침
+              </Button>
+            </Stack>
+          </Center>
+        </Container>
+      );
+    }
+
+    return this.props.children;
+  }
+}
diff --git a/frontend/src/shared/ui/index.ts b/frontend/src/shared/ui/index.ts
new file mode 100644
index 00000000..e79e25f7
--- /dev/null
+++ b/frontend/src/shared/ui/index.ts
@@ -0,0 +1 @@
+export * from './Timer';
diff --git a/frontend/src/shared/utils/index.ts b/frontend/src/shared/utils/index.ts
new file mode 100644
index 00000000..1ff09efd
--- /dev/null
+++ b/frontend/src/shared/utils/index.ts
@@ -0,0 +1 @@
+export * from './logger';
