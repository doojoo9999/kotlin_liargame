openapi: 3.0.3
info:
  title: Nemonemo API
  version: 0.1.0
  description: |
    HTTP API for the Nemonemo puzzle experience. Integrates with Liar Game SSO and points economy.
servers:
  - url: https://api.domain.com
    description: Production
  - url: https://staging.api.domain.com
    description: Staging
security:
  - bearerAuth: []

paths:
  /nemonemo/v1/puzzles:
    get:
      summary: List available puzzles for the authenticated user.
      parameters:
        - in: query
          name: releasePack
          schema:
            type: string
          description: Filter by weekly pack identifier.
        - in: query
          name: difficulty
          schema:
            $ref: '#/components/schemas/Difficulty'
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Paged puzzle list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PuzzlePage'
    post:
      summary: Submit new puzzle as creator/admin.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PuzzleDraftRequest'
      responses:
        '201':
          description: Submission created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PuzzleDraftResponse'

  /nemonemo/v1/puzzles/{puzzleId}:
    get:
      summary: Fetch puzzle metadata and current status.
      parameters:
        - $ref: '#/components/parameters/PuzzleId'
      responses:
        '200':
          description: Puzzle metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PuzzleDetail'

  /nemonemo/v1/sessions:
    post:
      summary: Start or resume a puzzle session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionStartRequest'
      responses:
        '200':
          description: Session created/resumed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'

  /nemonemo/v1/sessions/{sessionId}:
    get:
      summary: Retrieve session status and current grid state.
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Session data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
    patch:
      summary: Apply user actions (fill/mark) to a session.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionActionRequest'
      responses:
        '200':
          description: Updated session snapshot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'

  /nemonemo/v1/sessions/{sessionId}/complete:
    post:
      summary: Submit completion results and receive scoring.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCompletionRequest'
      responses:
        '200':
          description: Completion summary and rewards.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'

  /nemonemo/v1/leaderboards/weekly:
    get:
      summary: Retrieve weekly leaderboard for a release pack.
      parameters:
        - in: query
          name: releasePack
          required: true
          schema:
            type: string
        - in: query
          name: scope
          schema:
            type: string
            enum: [GLOBAL, FRIENDS]
            default: GLOBAL
      responses:
        '200':
          description: Leaderboard entries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'

  /nemonemo/v1/admin/releases:
    post:
      summary: Schedule puzzle releases (admin only).
      responses:
        '201':
          description: Release created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PuzzleReleaseResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PuzzleId:
      in: path
      name: puzzleId
      required: true
      schema:
        type: string
        format: uuid
    SessionId:
      in: path
      name: sessionId
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    Difficulty:
      type: string
      enum: [EASY, MEDIUM, HARD, EXPERT]
    PuzzleSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        title:
          type: string
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        width:
          type: integer
        height:
          type: integer
        estimatedMinutes:
          type: integer
        releasePack:
          type: string
        status:
          type: string
          enum: [LOCKED, AVAILABLE, IN_PROGRESS, COMPLETED]
    PuzzlePage:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PuzzleSummary'
        page:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer
    PuzzleDetail:
      allOf:
        - $ref: '#/components/schemas/PuzzleSummary'
        - type: object
          properties:
            description:
              type: string
            hints:
              $ref: '#/components/schemas/HintPayload'
            availableActions:
              type: array
              items:
                type: string
    HintPayload:
      type: object
      properties:
        rows:
          type: array
          items:
            type: array
            items:
              type: integer
        columns:
          type: array
          items:
            type: array
            items:
              type: integer
    PuzzleDraftRequest:
      type: object
      required: [title, width, height, grid]
      properties:
        title:
          type: string
        description:
          type: string
        width:
          type: integer
        height:
          type: integer
        grid:
          type: array
          items:
            type: array
            items:
              type: integer
        tags:
          type: array
          items:
            type: string
    PuzzleDraftResponse:
      type: object
      properties:
        submissionId:
          type: string
        status:
          type: string
          enum: [DRAFT, REVIEW, APPROVED]
    SessionStartRequest:
      type: object
      required: [puzzleId]
      properties:
        puzzleId:
          type: string
          format: uuid
        resume:
          type: boolean
          default: true
    SessionResponse:
      type: object
      properties:
        sessionId:
          type: string
          format: uuid
        puzzleId:
          type: string
          format: uuid
        status:
          type: string
          enum: [IN_PROGRESS, COMPLETED, ABANDONED]
        gridState:
          $ref: '#/components/schemas/GridState'
        mistakes:
          type: integer
        hintsUsed:
          type: integer
        startedAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        finalScore:
          type: integer
          nullable: true
        durationSeconds:
          type: integer
          nullable: true
    GridState:
      type: object
      properties:
        width:
          type: integer
        height:
          type: integer
        cells:
          type: array
          items:
            type: array
            items:
              type: string
              enum: [FILLED, EMPTY, MARKED]
    SessionActionRequest:
      type: object
      required: [actions]
      properties:
        actions:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              x:
                type: integer
              y:
                type: integer
              state:
                type: string
                enum: [FILLED, EMPTY, MARKED]
              clientTimestamp:
                type: string
                format: date-time
        mistakeCount:
          type: integer
        hintsUsed:
          type: integer
        durationSeconds:
          type: integer
    SessionCompletionRequest:
      type: object
      required: [finalScore, durationSeconds, mistakes, hintsUsed]
      properties:
        finalScore:
          type: integer
        durationSeconds:
          type: integer
        mistakes:
          type: integer
        hintsUsed:
          type: integer
        accuracy:
          type: number
          format: double
    CompletionResponse:
      type: object
      properties:
        sessionId:
          type: string
          format: uuid
        score:
          type: integer
        pointsAwarded:
          type: integer
        rankEstimate:
          type: integer
          nullable: true
        completionTimeSeconds:
          type: integer
    LeaderboardEntry:
      type: object
      properties:
        userId:
          type: string
        nickname:
          type: string
        rank:
          type: integer
        score:
          type: integer
        durationSeconds:
          type: integer
    LeaderboardResponse:
      type: object
      properties:
        releasePack:
          type: string
        scope:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardEntry'
    PuzzleReleaseResponse:
      type: object
      properties:
        releaseId:
          type: string
          format: uuid
        puzzleId:
          type: string
          format: uuid
        releaseAt:
          type: string
          format: date-time
        releasePack:
          type: string
        status:
          type: string
          enum: [SCHEDULED, PUBLISHED]
