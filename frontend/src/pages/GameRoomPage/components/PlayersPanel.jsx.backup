// Modernized PlayersPanel component
// CSS Grid layout with player cards and staggered animations

import React, {useState} from 'react'
import {AnimatePresence, motion} from 'framer-motion'
import {Box, Typography} from '../../../components/ui'
import {UserPlus as PersonAddIcon, Flag as ReportIcon} from 'lucide-react'
import UserAvatar from '../../../components/UserAvatar'
import {getPlayersPanelStyles, getResponsiveStyles} from './PlayersPanel.styles'

// ... existing code ...

// ... existing code ...

// ... existing code ...

// Player info section
const PlayerInfo = styled.div`
  flex: 1;
  min-width: 0; /* Allow text truncation */
`

// Player nickname
const PlayerNickname = styled.div`
  font-size: ${({ theme }) => theme.fontSize.sm};
  font-weight: ${({ theme }) => theme.fontWeight.semiBold};
  color: ${({ theme }) => theme.colors.text.primary};
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  line-height: ${({ theme }) => theme.lineHeight.none};
`

// Role badge
const RoleBadge = styled.div`
  display: inline-block;
  padding: ${({ theme }) => `2px ${theme.spacing[1]}`};
  border-radius: ${({ theme }) => theme.borderRadius.sm};
  font-size: ${({ theme }) => theme.fontSize.xs};
  font-weight: ${({ theme }) => theme.fontWeight.medium};
  text-transform: uppercase;
  margin-top: 2px;
  
  ${({ $role, theme }) => {
    switch ($role) {
      case 'liar':
        return css`
          background-color: ${theme.colors.game.liar[100]};
          color: ${theme.colors.game.liar[700]};
          border: 1px solid ${theme.colors.game.liar[300]};
        `
      case 'citizen':
        return css`
          background-color: ${theme.colors.game.citizen[100]};
          color: ${theme.colors.game.citizen[700]};
          border: 1px solid ${theme.colors.game.citizen[300]};
        `
      default:
        return css`
          background-color: ${theme.colors.surface.secondary};
          color: ${theme.colors.text.secondary};
          border: 1px solid ${theme.colors.border.primary};
        `
    }
  }}
`

// Bottom section with status and actions
const BottomSection = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: auto;
`

// Status text
const StatusText = styled.div`
  font-size: ${({ theme }) => theme.fontSize.xs};
  color: ${({ theme }) => theme.colors.text.secondary};
  display: flex;
  align-items: center;
  gap: ${({ theme }) => theme.spacing[1]};
  
  /* Crown icon for room owner */
  .crown-icon {
    color: ${({ theme }) => theme.colors.warning[500]};
  }
`

// Action buttons container
const ActionButtons = styled.div`
  display: flex;
  gap: ${({ theme }) => theme.spacing[0.5]};
  opacity: 0;
  transition: ${({ theme }) => theme.transition.fast};
  
  ${CardContainer}:hover & {
    opacity: 1;
  }
`

// Action button
const ActionButton = styled.button`
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
  border: none;
  border-radius: ${({ theme }) => theme.borderRadius.sm};
  background-color: ${({ theme }) => theme.colors.surface.secondary};
  color: ${({ theme }) => theme.colors.text.secondary};
  cursor: pointer;
  transition: ${({ theme }) => theme.transition.fast};
  
  svg {
    width: 14px;
    height: 14px;
  }
  
  &:hover {
    background-color: ${({ theme }) => theme.colors.primary[100]};
    color: ${({ theme }) => theme.colors.primary[600]};
    transform: scale(1.1);
  }
  
  &:active {
    transform: scale(0.95);
  }
  
  /* Report button styling */
  &.report-button:hover {
    background-color: ${({ theme }) => theme.colors.error[100]};
    color: ${({ theme }) => theme.colors.error[600]};
  }
`

// Individual Player Card Component
const PlayerCard = React.memo(function PlayerCard({
  player,
  isTurn = false,
  isSelf = false,
  isOwner = false,
  currentTurnPlayerId,
  onAddFriend,
  onReportPlayer,
  className = '',
  ...props
}) {
  const [isHovered, setIsHovered] = useState(false)
  
  // Determine player status text
  const getStatusText = () => {
    if (isOwner) return 'Î∞©Ïû•'
    if (isTurn) return 'Î∞úÏñ∏ Ï§ë'
    return 'ÎåÄÍ∏∞ Ï§ë'
  }
  
  // Handle friend add
  const handleAddFriend = (e) => {
    e.stopPropagation()
    onAddFriend?.(player)
  }
  
  // Handle report
  const handleReport = (e) => {
    e.stopPropagation()
    onReportPlayer?.(player)
  }

  const getCardStyles = (isTurn) => {
    const baseStyles = {
      position: 'relative',
      width: '160px',
      height: '120px',
      backgroundColor: '#ffffff',
      border: isTurn ? '2px solid #6366f1' : '1px solid #e5e7eb',
      borderRadius: '12px',
      boxShadow: isTurn ? '0 0 16px rgba(99, 102, 241, 0.3), 0 4px 6px rgba(0,0,0,0.1)' : '0 1px 3px rgba(0,0,0,0.1)',
      cursor: 'pointer',
      overflow: 'hidden',
      transition: 'all 0.2s ease'
    }

    if (isTurn) {
      baseStyles.borderColor = '#6366f1'
      baseStyles.boxShadow = '0 0 16px rgba(99, 102, 241, 0.3), 0 4px 6px rgba(0,0,0,0.1)'
    }

    return baseStyles
  }

  const getRoleBadgeStyles = (role) => {
    const baseStyles = {
      display: 'inline-block',
      padding: '2px 4px',
      borderRadius: '4px',
      fontSize: '12px',
      fontWeight: 500,
      textTransform: 'uppercase',
      marginTop: '2px'
    }

    switch (role) {
      case 'liar':
        return {
          ...baseStyles,
          backgroundColor: '#fef2f2',
          color: '#dc2626',
          border: '1px solid #fca5a5'
        }
      case 'citizen':
        return {
          ...baseStyles,
          backgroundColor: '#f0fdf4',
          color: '#16a34a',
          border: '1px solid #86efac'
        }
      default:
        return {
          ...baseStyles,
          backgroundColor: '#f9fafb',
          color: '#6b7280',
          border: '1px solid #e5e7eb'
        }
    }
  }
  
  return (
    <motion.div
      className={className}
      style={getCardStyles(isTurn)}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{
        type: "spring",
        stiffness: 300,
        damping: 25
      }}
      {...props}
    >
      <div style={{
        display: 'flex',
        flexDirection: 'column',
        padding: '12px',
        height: '100%',
        gap: '4px'
      }}>
        <div style={{
          display: 'flex',
          alignItems: 'center',
          gap: '8px',
          marginBottom: '4px'
        }}>
          <div style={{ position: 'relative', flexShrink: 0 }}>
            <UserAvatar
              userId={player.id}
              nickname={player.nickname}
              avatarUrl={player.avatarUrl}
              size="small"
            />
            <div style={{
              position: 'absolute',
              bottom: '-2px',
              right: '-2px',
              width: '12px',
              height: '12px',
              borderRadius: '50%',
              border: '2px solid #ffffff',
              backgroundColor: player.isOnline !== false ? '#22c55e' : '#9ca3af',
              zIndex: 2
            }} />
          </div>
          
          <div style={{ flex: 1, minWidth: 0 }}>
            <div style={{
              fontSize: '14px',
              fontWeight: 600,
              color: '#1f2937',
              whiteSpace: 'nowrap',
              overflow: 'hidden',
              textOverflow: 'ellipsis',
              lineHeight: 1
            }}>
              {player.nickname}
            </div>
            {player.role && (
              <div style={getRoleBadgeStyles(player.role)}>
                {player.role === 'liar' ? 'ÎùºÏù¥Ïñ¥' : 'ÏãúÎØº'}
              </div>
            )}
          </div>
        </div>
        
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          marginTop: 'auto'
        }}>
          <div style={{
            fontSize: '12px',
            color: '#6b7280',
            display: 'flex',
            alignItems: 'center',
            gap: '4px'
          }}>
            {isOwner && <span style={{ color: '#f59e0b' }}>üëë</span>}
            {getStatusText()}
          </div>
          
          <div style={{
            display: 'flex',
            gap: '2px',
            opacity: isHovered ? 1 : 0,
            transition: 'opacity 0.2s ease'
          }}>
            {!isSelf && (
              <button
                onClick={handleAddFriend}
                aria-label={`ÏπúÍµ¨ Ï∂îÍ∞Ä: ${player.nickname}`}
                title="ÏπúÍµ¨ Ï∂îÍ∞Ä"
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  width: '24px',
                  height: '24px',
                  border: 'none',
                  borderRadius: '4px',
                  backgroundColor: '#f9fafb',
                  color: '#6b7280',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease',
                  '&:hover': {
                    backgroundColor: '#e0e7ff',
                    color: '#4f46e5',
                    transform: 'scale(1.1)'
                  },
                  '&:active': {
                    transform: 'scale(0.95)'
                  }
                }}
              >
                <PersonAddIcon style={{ width: '14px', height: '14px' }} />
              </button>
            )}
            <button
              className="report-button"
              onClick={handleReport}
              aria-label={`Ïã†Í≥†: ${player.nickname}`}
              title="Ïã†Í≥†"
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                width: '24px',
                height: '24px',
                border: 'none',
                borderRadius: '4px',
                backgroundColor: '#f9fafb',
                color: '#6b7280',
                cursor: 'pointer',
                transition: 'all 0.2s ease',
                '&:hover': {
                  backgroundColor: '#fee2e2',
                  color: '#dc2626',
                  transform: 'scale(1.1)'
                },
                '&:active': {
                  transform: 'scale(0.95)'
                }
              }}
            >
              <ReportIcon style={{ width: '14px', height: '14px' }} />
            </button>
          </div>
        </div>
      </div>
    </motion.div>
  )
})

// Container variants for staggered animation
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2
    }
  }
}

// Individual card variants
const cardVariants = {
  hidden: { 
    opacity: 0, 
    scale: 0.8,
    y: 20 
  },
  visible: { 
    opacity: 1, 
    scale: 1,
    y: 0,
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 25
    }
  },
  exit: {
    opacity: 0,
    scale: 0.8,
    y: -20,
    transition: {
      duration: 0.2
    }
  }
}

const PlayersPanel = React.memo(function PlayersPanel({
  players,
  effectiveCurrentTurnPlayerId,
  currentUserNickname,
  onAddFriend,
  onReportPlayer,
}) {
  // Determine if player is room owner (first player in array)
  const isPlayerOwner = (player, index) => {
    return index === 0 || player.isOwner || player.role === 'owner'
  }
  
  // Handle empty state
  if (!players || players.length === 0) {
    return (
      <Box sx={{
        display: 'flex',
        flexDirection: 'column',
        gap: '8px',
        width: '100%'
      }}>
        <Box sx={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          flexDirection: 'column',
          padding: '32px',
          textAlign: 'center',
          border: '2px dashed #d1d5db',
          borderRadius: '12px',
          backgroundColor: '#f9fafb',
          minHeight: '200px'
        }}>
          <div style={{ fontSize: '48px', marginBottom: '8px', opacity: 0.5 }}>üë•</div>
          <Typography variant="body2" color="text.secondary">
            ÌîåÎ†àÏù¥Ïñ¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...
          </Typography>
        </Box>
      </Box>
    )
  }

  return (
    <Box sx={{
      display: 'flex',
      flexDirection: 'column',
      gap: '8px',
      width: '100%'
    }}>
      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fill, minmax(160px, 1fr))',
          gap: '16px',
          width: '100%',
          justifyItems: 'center'
        }}>
          <AnimatePresence mode="popLayout">
            {players.map((player, index) => {
              const isTurn = effectiveCurrentTurnPlayerId === player.id
              const isSelf = currentUserNickname && player.nickname === currentUserNickname
              const isOwner = isPlayerOwner(player, index)
              
              return (
                <motion.div
                  key={player.id}
                  variants={cardVariants}
                  initial="hidden"
                  animate="visible"
                  exit="exit"
                  layout
                  layoutId={`player-${player.id}`}
                  style={{ 
                    display: 'flex',
                    justifyContent: 'center',
                    width: '100%'
                  }}
                >
                  <PlayerCard
                    player={player}
                    isTurn={isTurn}
                    isSelf={isSelf}
                    isOwner={isOwner}
                    currentTurnPlayerId={effectiveCurrentTurnPlayerId}
                    onAddFriend={onAddFriend}
                    onReportPlayer={onReportPlayer}
                  />
                </motion.div>
              )
            })}
          </AnimatePresence>
        </div>
      </motion.div>
    </Box>
  )
})

PlayersPanel.displayName = 'PlayersPanel'
export default PlayersPanel
