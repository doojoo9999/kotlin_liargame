--- a/frontend/src/versions/main/pages/GamePageV2.tsx
+++ b/frontend/src/versions/main/pages/GamePageV2.tsx
@@ -37,37 +37,27 @@ export function MainGamePageV2() {
       try {
         setIsLoading(true)
         setError(null)
+        
+        console.log('GamePageV2: Initializing game with ID:', gameIdNumber)
 
-        // Load actual game state from backend
-        const gameState = await gameService.getGameState(gameIdNumber)
-
-        // Update the unified game store with real data
-        updateFromGameState(gameState)
-
-        // Initialize V2 store with real player data
-        if (gameState.players && gameState.players.length > 0) {
-          const players = gameState.players.map(p => ({
-            id: p.userId.toString(),
-            nickname: p.nickname
-          }))
-
-          // Use actual game data instead of dummy data
-          initialize(
-            gameId,
-            players,
-            gameState.currentSubject || '대기 중',
-            gameState.gameTotalRounds || 3
-          )
-        }
+        // Use the game initialization service to properly set up the game
+        const { gameInitializationService } = await import('@/services/gameInitializationService')
+        await gameInitializationService.initializeGameFromBackend(gameIdNumber)
 
+        console.log('GamePageV2: Game initialization completed')
         setIsLoading(false)
       } catch (error) {
-        console.error('Failed to load game data:', error)
+        console.error('GamePageV2: Failed to initialize game:', error)
         setError(error instanceof Error ? error.message : '게임을 불러올 수 없습니다')
         setIsLoading(false)
 
         toast({
           title: "게임을 찾을 수 없습니다",
           description: "게임이 존재하지 않거나 종료되었습니다",
           variant: "destructive",
         })
+        
+        // Navigate back to lobby on error
+        setTimeout(() => navigate('/lobby'), 2000)
       }
     }
 
-    if (!storeGameId && gameId) {
+    // Always initialize when we have a gameId and no storeGameId
+    // This ensures proper initialization when navigating from lobby
+    if (gameId && !storeGameId) {
       loadGameData()
     }
-  }, [gameId, storeGameId, initialize, updateFromGameState, toast])
+  }, [gameId, storeGameId, toast, navigate])
